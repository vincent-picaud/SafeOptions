#+TITLE: A Mathematica package for safer option management

* What is it?

  SafeOptions is a small Mathematica package I have written to provide a
  safer way to use options.

** Motivation

   Algorithms can often be splitted into smaller and reusable functions
   (that's a good thing).

   However with this scheme you have to control option value coherence
   and perform option forwarding.

   Imagine that you have 2 functions: =foo1= and =foo2=, where =a=, =b= are your
   algorithm parameters:

   #+BEGIN_SRC mathematica
Options[foo1] = {a->1, b->2};

foo1[arg__, opts : OptionsPattern[]] := 
	Print["foo1 a=", OptionValue[a], " b=", OptionValue[b]]; 

Options[foo2] = {b->-2};

foo2[arg__, opts : OptionsPattern[]] := 
	Print["foo2 b=", OptionValue[b]];
   #+END_SRC

   Now you want to define a =foo3= function that reuses =foo1= and =foo2=:

   #+BEGIN_SRC mathematica
Options[foo3] = {a->10, c->4};

foo3[opts : OptionsPattern[]] :=
	Block[{},
	      foo1[1, 2, FilterRules[{opts}, Options[foo1]]];
	      foo2[4, 5, FilterRules[{opts}, Options[foo2]]];
	];
   #+END_SRC

   Now observe that

   #+BEGIN_SRC mathematica
foo3[]
   #+END_SRC

   prints:
   #+BEGIN_EXAMPLE
foo1 a=1 b=2

foo2 b=-2
   #+END_EXAMPLE

   *There are two main issues:*

   - the =a->10= default value is not forwarded
   - incompatible option =b->2= for =foo1= and =b->-2= for =foo2= is not detected

   You can force this *manually*

   #+BEGIN_SRC mathematica
foo3[a->10, b->2]
   #+END_SRC

   #+BEGIN_EXAMPLE
foo1 a=10 b=2

foo2 b=2
   #+END_EXAMPLE

   However this is not a practical solution...

   This is the point where this package comes to the rescue.

** SafeOptions's solution

   To use the package
   #+BEGIN_SRC mathematica
<<SafeOptions`
   #+END_SRC

   you must modify =foo3= as follows:

   #+BEGIN_SRC mathematica
Options[foo3] = createOptionList[{a->10, b->1}, Options /@ {foo1, foo2}];

foo3[opts : OptionsPattern[]] :=      
	Block[{safeOpts},

	      If[(safeOpts = getOptionList[Options[foo3], opts]) === $Failed, 
		 Return[$Failed]];

	      foo1[1, 2, filterOptionList[Options[foo1], safeOpts]]; 
	      foo2[4, 5, filterOptionList[Options[foo2], safeOpts]];
	];
   #+END_SRC

   now

   #+BEGIN_SRC mathematica
foo3[]
   #+END_SRC

   prints:
   #+BEGIN_EXAMPLE
foo1 a=10 b=1

foo2 b=1
   #+END_EXAMPLE
   as expected. The options are *correctly forwarded*.

   Also observe that if we do not provide the default option value =b->1=

   #+BEGIN_SRC mathematica
Options[foo3] = createOptionList[{a->10}, Options /@ {foo1, foo2}]
   #+END_SRC

   an *error message is generated in case of incompatible option values*:
   #+BEGIN_EXAMPLE
safeOptions::incompatibleOptions: Some options are incompatibles {b->{2,-2}}
$Failed
   #+END_EXAMPLE

* Documentation

  =SafeOptions= package defines these symbols and functions:
  #+BEGIN_SRC mathematica
?"SafeOptions`*"
  #+END_SRC

  #+BEGIN_EXAMPLE
appendOptions	   hasUniqueOptionQ	    optionValue
createOptionList   ignoreOption	            overwriteOptions
filterOptionList   normalizedOptionListQ    safeOptions
getOptionList	   normalizeOptionPattern   updateOptions
hasOptionQ	   optionKeysToIgnore	
  #+END_EXAMPLE

  The usual scheme to use =SafeOptions= is *always the same* and is as
  follows:

  #+BEGIN_SRC mathematica
Options[foo3] = createOptionList[{a->10, b->1}, Options /@ {foo1, foo2}];

foo3[opts : OptionsPattern[]] :=      
	Block[{safeOpts},

	      If[(safeOpts = getOptionList[Options[foo3], opts]) === $Failed, 
		 Return[$Failed]];

	      safeOpts = updateOptions[safeOpts, b->2];

	      foo1[1, 2, filterOptionList[Options[foo1], safeOpts]]; 
	      foo2[4, 5, filterOptionList[Options[foo2], safeOpts]];
	];
  #+END_SRC

  The main functions you must know are:
  - =createOptionList[]=
  - =getOptionList[]=
  - =filterOptionList[]=

** The =createOptionList[]= function

   This function creates an *exhaustive* list of options:

   #+BEGIN_SRC mathematica
createOptionList[addedOptions,inheritedOptions,optionKeysToIgnore->{}]
   #+END_SRC

   - =addedOptions= are the options you want to add or overload with a default value
   - =inheritedOptions= are the used subroutines options
   - =optionKeysToIgnore= is the list of option keys you want to remove
     from the user interface

*** Examples

**** Basic usage

     #+BEGIN_SRC mathematica
createOptionList[{a->1}, {{b->2}, {c->3, d->4}}]
     #+END_SRC
     #+BEGIN_EXAMPLE
{a->1, b->2, c->3, d->4}
     #+END_EXAMPLE

**** Ignored options

     #+BEGIN_SRC mathematica
createOptionList[{a->1}, {{b->2}, {c->3, d->4}}, optionKeysToIgnore->{b}]
     #+END_SRC
     #+BEGIN_EXAMPLE
{a->1, c->3, d->4}
     #+END_EXAMPLE

**** Option value conflict
     #+BEGIN_SRC mathematica
createOptionList[{a->1}, {{b->2}, {c->3, b->3, d->4}}]
     #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::incompatibleOptions: Some options are incompatibles {b->{2,3}}
$Failed
     #+END_EXAMPLE

     You can solve this by either:
     - ignoring the option, =optionKeysToIgnore->{b}= (as before):
       #+BEGIN_SRC mathematica
createOptionList[{a->1}, {{b->2}, {c->3, b->3, d->4}}, optionKeysToIgnore->{b}]
       #+END_SRC
       #+BEGIN_EXAMPLE
     {a->1, c->3, d->4}
       #+END_EXAMPLE

     - explicitly defining a default value:
       #+BEGIN_SRC mathematica
createOptionList[{a->1, b->2}, {{b->2}, {c->3, b->3, d->4}}]
       #+END_SRC
       #+BEGIN_EXAMPLE
     {a->1, b->2, c->3, d->4}
       #+END_EXAMPLE

**** Possibly generated errors

     The function generates an error in the followings cases:

     - adding and ignoring an option in the same time:
       #+BEGIN_SRC mathematica
createOptionList[{a->1, b->2}, {{b->2}, {c->3, b->3, d->4}}, optionKeysToIgnore->{b}]
       #+END_SRC
       #+BEGIN_EXAMPLE
     safeOptions::cannotAddAndIgnore: Cannot add and ignore in the same times these options: {b}
     $Failed
       #+END_EXAMPLE
     - incompatible option value 
       #+BEGIN_SRC mathematica
createOptionList[{a->1}, {{b->2}, {c->3, b->3, d->4}}]
       #+END_SRC
       #+BEGIN_EXAMPLE
     safeOptions::incompatibleOptions: Some options are incompatibles {b->{2,3}}
     $Failed
       #+END_EXAMPLE
** =getOptionList[]=

   This function retrieves the whole set of options, taking into
   account the modifications from the =opts= function argument.

   #+BEGIN_SRC mathematica
getOptionList[alloptions,opts]
   #+END_SRC

   - =allOptions= the complete list of the current function options,
     generally obtained by =Options[foo]=
   - =opts= the options provided by the =opts:OptionPattern[]= argument

*** Examples
    #+BEGIN_SRC mathematica
getOptionList[{a -> 1, b -> 2}]
    #+END_SRC
    #+BEGIN_EXAMPLE
{a -> 1, b -> 2}
    #+END_EXAMPLE

    #+BEGIN_SRC mathematica
getOptionList[{a->1, b->2}, {b->3}]
    #+END_SRC
    #+BEGIN_EXAMPLE
{a -> 1, b -> 3}
    #+END_EXAMPLE
**** Possibly generated errors
     - in case of unknown option 
       #+BEGIN_SRC mathematica
getOptionList[{a->1, b->2}, {c->3}]
       #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::unknownOptions: Unknown options {c}
$Failed
     #+END_EXAMPLE
     - in case of duplicated options
       #+BEGIN_SRC mathematica
getOptionList[{a -> 1, b -> 2, b -> 3}, {a -> 1}]
       #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::duplicateOptions: Duplicate options {b}
$Failed
     #+END_EXAMPLE

     #+BEGIN_SRC mathematica
getOptionList[{a -> 1, b -> 2}, {a -> 1, a -> 2}]
     #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::duplicateOptions: Duplicate options {a}
$Failed
     #+END_EXAMPLE
**  =filterOptionList[]=

   The role of this function is to filter options when calling a subroutine:

   #+BEGIN_SRC mathematica
filterOptionList[subroutineOptions,allOptions]
   #+END_SRC

   - =subroutineOptions= the exhaustive list of the subroutine options,
     generally =Options[subroutine]=.
   - =allOptions= the exhaustive list of the current function options. This
     list is generally the one obtained thanks to the =getOptionlist[]=
     function.

*** Examples

    #+BEGIN_SRC mathematica
filterOptionList[{a -> 1}, {a -> 2, b -> 3}]
    #+END_SRC
    #+BEGIN_EXAMPLE
{a -> 2}
    #+END_EXAMPLE
**** Possibly generated errors

     In case of duplicate option 
     #+BEGIN_SRC mathematica
filterOptionList[{a -> 1, a -> 2}, {a -> 2, b -> 3}]
     #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::duplicateOptions: Duplicate options {a}
$Failed
     #+END_EXAMPLE

     #+BEGIN_SRC mathematica
filterOptionList[{a -> 1}, {a -> 2, b -> 3, b -> 4}]
     #+END_SRC
     #+BEGIN_EXAMPLE
safeOptions::duplicateOptions: Duplicate options {b}
$Failed
     #+END_EXAMPLE

** Other functions

*** =optionValue[]=

    This function retrieves option value
    #+BEGIN_SRC mathematica
optionValue[allOptions,optionKey]
    #+END_SRC
    it is essentially equivalent to 
    #+BEGIN_SRC mathematica
optionKey /. allOptions
    #+END_SRC
    but adds some argument check to detect unknown or duplicate option.

    #+BEGIN_SRC mathematica
optionValue[{a -> 1, b -> 2}, b]
    #+END_SRC

    #+BEGIN_EXAMPLE
2
    #+END_EXAMPLE

*** =updateOptions[]=

    This function modifies an option list. There are two main cases

    - the option is absent, hence the new option is added to the list
    #+BEGIN_SRC mathematica
updateOptions[{a -> 1}, b -> 2]
    #+END_SRC
    #+BEGIN_EXAMPLE
{a -> 1, b -> 2}
    #+END_EXAMPLE

    - the option is already present, hence the option is overwritten with
      the new value
    #+BEGIN_SRC mathematica
updateOptions[{a -> 1, b -> 2}, a -> 3]
    #+END_SRC
    #+BEGIN_EXAMPLE
{a -> 3, b -> 2}
    #+END_EXAMPLE

** =normalizeOptionPattern[]=

This function is mainly used internally but is important as it normalizes =opts:OptionsPattern[]=. 

*** Motivation

As shown below =OptionsPattern[]= is very permissive:

#+BEGIN_SRC mathematica
foo[opts:OptionsPattern[]]:=opts

foo[2]
foo[{}]
foo[{{}}]
foo[a -> 1, b -> 2]
foo[{a -> 1, b -> 2}]
foo[{{a -> 1, b -> 2}}]
foo[{{{a -> 1, b -> 2}}}]
#+END_SRC

prints:

#+BEGIN_EXAMPLE
foo[2]
{}
{{}}
Sequence[a -> 1, b -> 2]
{a -> 1, b -> 2}
{{a -> 1, b -> 2}}
{{{a -> 1, b -> 2}}}
#+END_EXAMPLE

This make options processing tedious, for instance

#+BEGIN_SRC mathematica
foo[k_Symbol,opts:OptionsPattern[]]:=MemberQ[Keys[opts],k]
#+END_SRC

does not work as expected:

#+BEGIN_SRC mathematica 
foo[a,{}]              (* OK *)
foo[a,{a->1,b->2}]     (* OK *)
foo[a,{{a->1,b->2}}]   (* Problem *)
foo[a,a->1,b->2]       (* Problem *)
#+END_SRC

outputs:

#+BEGIN_EXAMPLE
False
True
False <- Should be True
False <- Should be True
#+END_EXAMPLE

The *solution* is to use =normalizeOptionPattern[]= that transforms all
these different forms into a well define list of transformation rules:

#+BEGIN_SRC mathematica
foo[opts:OptionsPattern[]]:=normalizeOptionPattern[opts]

foo[2]
foo[{}]
foo[{{}}]
foo[a -> 1, b -> 2]
foo[{a -> 1, b -> 2}]
foo[{{a -> 1, b -> 2}}]
foo[{{{a -> 1, b -> 2}}}]
#+END_SRC

prints:

#+BEGIN_EXAMPLE
foo[2]
{}
{}
{a -> 1, b -> 2}
{a -> 1, b -> 2}
{a -> 1, b -> 2}
{a -> 1, b -> 2}
#+END_EXAMPLE

Now 
#+BEGIN_SRC mathematica
foo[k_Symbol,opts:OptionsPattern[]]:=MemberQ[Keys[normalizeOptionPattern[opts]],k]
#+END_SRC

works as expected:

#+BEGIN_SRC mathematica 
foo[a,{}]              (* OK *)
foo[a,{a->1,b->2}]     (* OK *)
foo[a,{{a->1,b->2}}]   (* OK *)
foo[a,a->1,b->2]       (* OK *)
#+END_SRC

outputs:

#+BEGIN_EXAMPLE
False
True
True
True
#+END_EXAMPLE

** Illustration of the general scheme

A little bit overkill, but for illustration purpose:

#+BEGIN_SRC mathematica 
Options[foo1] = createOptionList[{a -> 1, b -> 2}];

foo1[arg__, opts : OptionsPattern[]] := 
Block[{safeOpts},

   If[(safeOpts = getOptionList[Options[foo1],opts])===$Failed,Return[$Failed]];

   Print["foo1 a=", optionValue[safeOpts,a], " b=", optionValue[safeOpts,b]]; 
   ];
#+END_SRC

#+BEGIN_SRC mathematica 
Options[foo2] = createOptionList[{b -> -2}];

foo2[arg__, opts : OptionsPattern[]] := 
 Block[{safeOpts},

   If[(safeOpts = getOptionList[Options[foo2],opts])===$Failed,Return[$Failed]];

   Print["foo2 b=", optionValue[safeOpts,b]];
   ];
#+END_SRC

#+BEGIN_SRC mathematica 
Options[foo3] = createOptionList[{a -> 10, b -> 1, c -> 4}, Options /@ {foo1, foo2}];

foo3[opts : OptionsPattern[]] :=      
  Block[{safeOpts},
 
   If[(safeOpts = getOptionList[Options[foo3],opts])===$Failed,Return[$Failed]];
   
   safeOpts=updateOptions[safeOpts,b->3];
   
   foo1[1, 2,filterOptionList[Options[foo1],safeOpts]]; 
   foo2[4, 5,filterOptionList[Options[foo2],safeOpts]];
  ];
#+END_SRC

* Installation

The easiest way to install this package is to clone this directory and
use the Mathematica front end =File->Install= to install the
=SafeOptions.m= file.
